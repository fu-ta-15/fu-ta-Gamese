//*****************************************************************************
//
// パーティクル処理 [particle.cpp]
// Author : SUZUKI FUUTA
//
//*****************************************************************************
//-----------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------
#include "particle.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CParticle::CParticle()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CParticle::~CParticle()
{
}

//=============================================================================
// ポーズの生成
//=============================================================================
CParticle * CParticle::Create(int EffectNum, D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	CParticle *pParticle = NULL;

	if (pParticle == NULL)
	{
		pParticle = new CParticle;
		pParticle->m_pos = pos;
		pParticle->m_size = size;
		pParticle->m_EffectNum = EffectNum;
		pParticle->m_apParticle[MAX_EFFECT_NUM] = {};
		pParticle->Init();
	}

	return pParticle;
}

//=============================================================================
// 初期化
//=============================================================================
HRESULT CParticle::Init(void)
{
	for (int nCnt = 0; nCnt < m_EffectNum; nCnt++)
	{
		if (m_apParticle[nCnt] == NULL)
		{
			m_apParticle[nCnt] = CEffect::Create(m_pos, m_size);
		}
	}
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CParticle::Uninit(void)
{
}

//=============================================================================
// 更新処理
//=============================================================================
void CParticle::Update(void)
{
}

//=============================================================================
// 描画処理
//=============================================================================
void CParticle::Draw(void)
{
}

//=============================================================================
// 爆発処理
//=============================================================================
void CParticle::Explosion(void)
{
}
