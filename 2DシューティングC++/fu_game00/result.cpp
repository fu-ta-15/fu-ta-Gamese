//*****************************************************************************
//
// リザルト処理 [result.cpp]
// Author : SUZUKI FUUTA
//
//*****************************************************************************

//-----------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------
#include "result.h"
#include "keyinput.h"
#include "scene2D.h"
#include "manager.h"
#include "fade.h"
#include "score.h"

//-----------------------------------------------------------------------------
// 静的メンバ変数
//-----------------------------------------------------------------------------
bool CResult::m_bEndGame;

//=============================================================================
// コンストラクタ
//=============================================================================
CResult::CResult() : CScene(OBJ_NONE)
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CResult::~CResult()
{
}

//=============================================================================
// リザルトの生成
//=============================================================================
CResult * CResult::Create(void)
{
	// メモリ確保
	CResult* pResult = new CResult;

	// 初期化処理
	pResult->Init();

	return pResult;
}

//=============================================================================
// 初期化
//=============================================================================
HRESULT CResult::Init(void)
{
	m_ResultUI[0] = CScene2D::Create(CENTER_POS, CENTER_POS);
	m_ResultUI[0]->CreateTexture("data/TEXTURE/BG.png");
	m_ResultUI[1] = CScene2D::Create(CENTER_POS, D3DXVECTOR3(200.0f, 200.0f, 0.0f));
	if (m_bEndGame)
	{
		m_ResultUI[1]->CreateTexture("data/TEXTURE/clearlog.png");
	}
	else
	{
		m_ResultUI[1]->CreateTexture("data/TEXTURE/fail.png");
	}

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CResult::Uninit(void)
{
	//オブジェクトの破棄
	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CResult::Update(void)
{
	CKey *pKey = CManager::GetKey();
	CFade::FADE Fade = CFade::GetFade();   // フェード情報

	if (pKey->GetState(CKey::STATE_RELEASE, DIK_SPACE) && Fade == CFade::FADE_NONE)
	{
		CManager::GetFade()->SetFade(CManager::MODE_TITLE);
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CResult::Draw(void)
{
}
