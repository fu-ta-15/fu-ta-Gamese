//*****************************************************************************
//
// 時間処理 [time.cpp]
// Author : SUZUKI FUUTA
//
//*****************************************************************************
//-----------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------
#include "time.h"

//-----------------------------------------------------------------------------
// マクロ変数
//-----------------------------------------------------------------------------
#define POLYGON_SPLIT		(11)
#define POS_DICETANCE		(m_size.x * 2)
#define TIME				(m_nTime)

//=============================================================================
// コンストラクタ
// シーンにはシンプルのオブジェクトとして指定
//=============================================================================
CTime::CTime() : CScene(OBJ_NONE)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CTime::~CTime()
{
}

//=============================================================================
// 時間の生成
//=============================================================================
CTime * CTime::Create(const D3DXVECTOR3 pos, const D3DXVECTOR3 size, const int nTime)
{
	CTime *pTime = NULL;
	if (pTime == NULL)
	{// NULLチェック
		pTime = new CTime;
		pTime->m_pos = pos;		 // 位置
		pTime->m_size = size;	 // サイズ
		pTime->m_nTime = nTime;	 // 時間
		pTime->m_nCntTime = 0;	 // カウント初期化
		pTime->Init();
	}
	return pTime;
}

//=============================================================================
// 時間のポリゴンなどの生成
//=============================================================================
HRESULT CTime::Init()
{
	/* ナンバーポリゴンの生成とテクスチャの設定 */
	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{// 右に位置を進める　＝　左か 100・10・1 という桁 
		m_apNumber[nCnt] = CNumber::Create(m_pos, m_size, POLYGON_SPLIT); // ナンバー生成
		m_apNumber[nCnt]->Load("data/TEXTURE/NumFont.png");				  // テクスチャ
		m_pos.x += POS_DICETANCE;										  // 位置
	}

	SetTime(TIME);	// 時間の設定

	return S_OK;
}

//=============================================================================
// 時間の終了処理
//=============================================================================
void CTime::Uninit()
{
	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{
		if (m_apNumber[nCnt] != NULL)
		{// NULLチェック
			m_apNumber[nCnt]->Uninit();
			delete m_apNumber[nCnt];
			m_apNumber[nCnt] = NULL;
		}
	}

	//オブジェクトの破棄
	Release();
}

//=============================================================================
// 時間の更新処理
//=============================================================================
void CTime::Update()
{
	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{
		if (m_apNumber[nCnt] != NULL)
		{// NULLチェック
			m_apNumber[nCnt]->Update();
		}
	}
}

//=============================================================================
// 時間の描画処理
//=============================================================================
void CTime::Draw()
{
	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{
		if (m_apNumber[nCnt] != NULL)
		{// NULLチェック
			m_apNumber[nCnt]->Draw();
		}
	}
}

//=============================================================================
// 時間の設定
//=============================================================================
void CTime::SetTime(int nTime)
{
	int aNumber[MAX_TIME];	// 桁ごとの計算用
	int nMath = 1000;		// 時間計算用

	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{
		aNumber[nCnt] = (nTime % nMath / (nMath / 10));	 // 現在の桁の数字を算出
		m_apNumber[nCnt]->SetNumber(aNumber[nCnt]);		 // 現在の桁の数字にTEX座標更新
		nMath /= 10;									 // 桁を更新
	}
}

//=============================================================================
// 時間の変更
//=============================================================================
void CTime::AddTime(int nValue)
{
	m_nTime += nValue;	// 時間の変更
	SetTime(m_nTime);	// 時間設定
}

//=============================================================================
// 時間の変更するためのカウント更新
//=============================================================================
int CTime::AddCnt(int nValue)
{
	m_nCntTime += 1;	// カウント更新
	return m_nCntTime;	// カウント情報を返す
}

//=============================================================================
// 時間の取得
//=============================================================================
int CTime::GetTime()
{
	return m_nTime;
}
